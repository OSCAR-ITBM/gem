package com.gem.sistema.business.service.catalogos;

import static com.gem.sistema.util.Constants.ACCOUNT_AUTOGENERATED_BUDGET_8211;
import static com.gem.sistema.util.Constants.ACCOUNT_AUTOGENERATED_BUDGET_8212;
import static com.gem.sistema.util.Constants.ACCOUNT_AUTOGENERATED_BUDGET_8213;
import static com.gem.sistema.util.Constants.ACCOUNT_AUTOGENERATED_BUDGET_8214;
import static com.gem.sistema.util.Constants.ACCOUNT_AUTOGENERATED_BUDGET_8215;
import static com.gem.sistema.util.Constants.ACCOUNT_AUTOGENERATED_BUDGET_8216;
import static com.gem.sistema.util.Constants.ACCOUNT_AUTOGENERATED_BUDGET_8221;
import static com.gem.sistema.util.Constants.ACCOUNT_AUTOGENERATED_BUDGET_8222;
import static com.gem.sistema.util.Constants.ACCOUNT_AUTOGENERATED_BUDGET_8223;
import static com.gem.sistema.util.Constants.ACCOUNT_AUTOGENERATED_BUDGET_8224;
import static com.gem.sistema.util.Constants.ACCOUNT_AUTOGENERATED_BUDGET_8225;
import static com.gem.sistema.util.Constants.ACCOUNT_AUTOGENERATED_BUDGET_8226;
import static com.gem.sistema.util.Constants.ACCOUNT_AUTOGENERATED_BUDGET_8241;
import static com.gem.sistema.util.Constants.ACCOUNT_AUTOGENERATED_BUDGET_8242;
import static com.gem.sistema.util.Constants.ACCOUNT_AUTOGENERATED_BUDGET_8243;
import static com.gem.sistema.util.Constants.ACCOUNT_AUTOGENERATED_BUDGET_8244;
import static com.gem.sistema.util.Constants.ACCOUNT_AUTOGENERATED_BUDGET_8245;
import static com.gem.sistema.util.Constants.ACCOUNT_AUTOGENERATED_BUDGET_8246;
import static com.gem.sistema.util.Constants.ACCOUNT_AUTOGENERATED_BUDGET_8251;
import static com.gem.sistema.util.Constants.ACCOUNT_AUTOGENERATED_BUDGET_8252;
import static com.gem.sistema.util.Constants.ACCOUNT_AUTOGENERATED_BUDGET_8253;
import static com.gem.sistema.util.Constants.ACCOUNT_AUTOGENERATED_BUDGET_8254;
import static com.gem.sistema.util.Constants.ACCOUNT_AUTOGENERATED_BUDGET_8255;
import static com.gem.sistema.util.Constants.ACCOUNT_AUTOGENERATED_BUDGET_8256;
import static com.gem.sistema.util.Constants.ACCOUNT_AUTOGENERATED_BUDGET_8271;
import static com.gem.sistema.util.Constants.ACCOUNT_AUTOGENERATED_BUDGET_8272;
import static com.gem.sistema.util.Constants.ACCOUNT_AUTOGENERATED_BUDGET_8273;
import static com.gem.sistema.util.Constants.ACCOUNT_AUTOGENERATED_BUDGET_8274;
import static com.gem.sistema.util.Constants.ACCOUNT_AUTOGENERATED_BUDGET_8275;
import static com.gem.sistema.util.Constants.ACCOUNT_AUTOGENERATED_BUDGET_8276;
import static com.gem.sistema.util.Constants.ACCOUNT_AUTOGENERATED_INCOME_8110;
import static com.gem.sistema.util.Constants.ACCOUNT_AUTOGENERATED_INCOME_8120;
import static com.gem.sistema.util.Constants.ACCOUNT_AUTOGENERATED_INCOME_8130;
import static com.gem.sistema.util.Constants.ACCOUNT_AUTOGENERATED_INCOME_8140;
import static com.gem.sistema.util.Constants.ACCOUNT_AUTOGENERATED_INCOME_8150;
import static com.gem.sistema.util.Constants.ACCOUNT_AUTOGENERATED_INCOME_8227;
import static com.gem.sistema.util.Constants.ACCOUNT_AUTOGENERATED_INCOME_8247;
import static com.gem.sistema.util.Constants.ACCOUNT_AUTOGENERATED_INCOME_8257;
import static com.gem.sistema.util.Constants.ACCOUNT_AUTOGENERATED_INCOME_8277;
import static com.gem.sistema.util.Constants.ACCOUNT_EXPEDITURE_51;
import static com.gem.sistema.util.Constants.ACCOUNT_EXPEDITURE_52;
import static com.gem.sistema.util.Constants.ACCOUNT_EXPEDITURE_53;
import static com.gem.sistema.util.Constants.ACCOUNT_EXPEDITURE_54;
import static com.gem.sistema.util.Constants.ACCOUNT_EXPEDITURE_56;
import static com.gem.sistema.util.Constants.ACCOUNT_EXPEDITURE_57;
import static com.gem.sistema.util.Constants.TWO;
import static com.gem.sistema.util.Constants.ZERO;

import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;

import org.apache.commons.collections4.IterableUtils;
import org.apache.commons.lang3.BooleanUtils;
import org.apache.commons.lang3.StringUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;

import com.gem.sistema.business.domain.Cuenta;
import com.gem.sistema.business.domain.Maycta;
import com.gem.sistema.business.predicates.CuentaPredicates;
import com.gem.sistema.business.predicates.DependencePredicates;
import com.gem.sistema.business.predicates.MayctaPredicates;
import com.gem.sistema.business.predicates.MuniNepPredicates;
import com.gem.sistema.business.predicates.NatgasPredicates;
import com.gem.sistema.business.predicates.PolidePredicate;
import com.gem.sistema.business.predicates.PolizaPredicates;
import com.gem.sistema.business.repository.catalogs.CatdepRepository;
import com.gem.sistema.business.repository.catalogs.CuentaRepository;
import com.gem.sistema.business.repository.catalogs.MayctaRepository;
import com.gem.sistema.business.repository.catalogs.MuniNepRepository;
import com.gem.sistema.business.repository.catalogs.NatgasRepository;
import com.gem.sistema.business.repository.catalogs.PolideRepository;
import com.gem.sistema.business.repository.catalogs.PolizaRepository;
import com.gem.sistema.load.fileupload.validators.results.EgresResultBean;
import com.gem.sistema.util.Constants;
import com.gem.sistema.web.bean.CatalogAccountsMB;
import com.mysema.query.types.Predicate;

// TODO: Auto-generated Javadoc
/**
 * The Class AccountServiceImpl.
 *
 * @author Juan Carlos Pedraza Alcala
 */
@Service("accountService")
public class AccountServiceImpl implements AccountService {

	/** Constante para utilizar el log de la aplicacion. */
	private static final Logger LOGGER = LoggerFactory.getLogger(AccountServiceImpl.class);

	/** The Constant ZERO_DOUBLE. */
	private static final BigDecimal ZERO_DOUBLE = new BigDecimal("0.00");

	/**
	 * Repositorio de Cuentas.
	 */
	@Autowired
	private CuentaRepository cuentaRepository;

	/**
	 * Repositorio de Cuentas.
	 */
	// @Autowired
	// private XcatproRepository xcatproRepository;

	/**
	 * Repositorio de Cuentas.
	 */
	@Autowired
	private MayctaRepository mayctaRepository;

	/**
	 * Repositorio de Natgas.
	 */
	@Autowired
	private NatgasRepository natgasRepository;

	/** Mensaje de error cunado no existen los niveles previos. */
	@Value("${catalog.message.account.previouslevel.not.exist}")
	private String ERROR_PREVIOUS_LEVEL_NOT_EXIST;

	/** Mensaje de error cunado no existen los niveles previos. */
	@Value("${catalog.message.account.notlevel}")
	private String ERROR_ACC_LEVEL_NOT;

	/** Mensaje de error cunado existe la cuenta previamente. */
	@Value("${catalog.message.account.previouslaccoun.exist}")
	private String ERROR_PREVIOUS_ACCOUNT_EXIST;

	/** The contables patter. */
	@Value("${accountService.contable.pattern}")
	public String CONTABLES_PATTER;

	/** The account type 5x regexp. */
	@Value("${catalog.account.type5x}")
	private String ACCOUNT_TYPE_5X_REGEXP;

	/** The account type 5x8x regexp. */
	@Value("${accountService.display.help.pattern}")
	private String ACCOUNT_TYPE_5X8X_REGEXP;

	/** Campo Sssscuenta. */
	@Value("${catalog.message.notdeleted.record}")
	private String MESSAGE_NODELETED_RECORD;

	/** Campo Sssscuenta. */
	@Value("${catalog.message.account.mayor.notdelete}")
	private String MESSAGE_MAYOR_NODELETE;

	/** Campo Sssscuenta. */
	@Value("${catalog.message.account.useonpolicy}")
	private String MESSAGE_ACC_USEONPOLICY;

	/** Campo Sssscuenta. */
	@Value("${catalog.message.account.haschild}")
	private String MESSAGE_ACC_HASCHILD;

	/** Campo Sssscuenta. */
	@Value("${catalog.message.account.hasbalnce}")
	private String MESSAGE_ACC_HASBALANCE;

	/** Campo Sssscuenta. */
	@Value("${accountService.account.incomes.pattern}")
	private String ACC_INCOMES_REGEX;

	/** Campo Sssscuenta. */
	@Value("${accountService.account.expenses.pattern}")
	private String ACC_EXPENSES_REGEX;

	/** Campo Sssscuenta. */
	@Value("${catalog.message.account.budget.exclude}")
	private String ACC_BUDGET_EXC_REGEX;

	/** Campo Sssscuenta. */
	@Value("${catalog.message.account.budget.nodelete}")
	private String MESSAGE_ACC_BUDGET_NODELETE;

	/** The egreso e10 regex. */
	@Value("${catalog.message.account.egreso.e10}")
	private String EGRESO_E10_REGEX;

	/** The egreso e11 regex. */
	@Value("${catalog.message.account.egreso.e11}")
	private String EGRESO_E11_REGEX;

	/** The egreso e12 regex. */
	@Value("${catalog.message.account.egreso.e12}")
	private String EGRESO_E12_REGEX;

	/** The egreso e13 regex. */
	@Value("${catalog.message.account.egreso.e13}")
	private String EGRESO_E13_REGEX;

	/** The egreso e14 regex. */
	@Value("${catalog.message.account.egreso.e14}")
	private String EGRESO_E14_REGEX;

	/** The cuenta cap1. */
	@Value("${catalog.account.valueChapter1}")
	private String CUENTA_CAP1;

	/** The cuenta cap2. */
	@Value("${catalog.account.valueChapter2}")
	private String CUENTA_CAP2;

	/** The cuenta cap3. */
	@Value("${catalog.account.valueChapter3}")
	private String CUENTA_CAP3;

	/** The cuenta cap4. */
	@Value("${catalog.account.valueChapter4}")
	private String CUENTA_CAP4;

	/** The cuenta cap5. */
	@Value("${catalog.account.valueChapter5}")
	private String CUENTA_CAP5;

	/** The cuenta cap6. */
	@Value("${catalog.account.valueChapter6}")
	private String CUENTA_CAP6;

	/** The cuenta cap7. */
	@Value("${catalog.account.valueChapter7}")
	private String CUENTA_CAP7;

	/** The cuenta cap8. */
	@Value("${catalog.account.valueChapter8}")
	private String CUENTA_CAP8;

	/** The cuenta cap9. */
	@Value("${catalog.account.valueChapter9}")
	private String CUENTA_CAP9;

	/** The account type 8217 regexp. */
	@Value("${accountService.account.8217.pattern}")
	private String ACCOUNT_TYPE_8217_REGEXP;

	/** The no maycta. */
	@Value("${catalog.message.account.noexist.maycta}")
	private String NO_MAYCTA;

	/**
	 * Repositorio de Dependencias.
	 */
	@Autowired
	private CatdepRepository catdepRepository;

	/** polizaRepository. */
	@Autowired
	private PolizaRepository polizaRepository;

	/** The polide repository. */
	@Autowired
	private PolideRepository polideRepository;

	/** The muni nep repository. */
	@Autowired
	private MuniNepRepository muniNepRepository;

	/*
	 * (non-Javadoc)
	 *
	 * @see com.gem.sistema.business.service.catalogos.AccountService#
	 * isValidPreviousLevelAccount(com.gem.sistema.business.domain.Cuenta)
	 */
	public boolean isValidPreviousLevelAccount(final Cuenta catalog, final StringBuilder errorMsg, Long idsector) {
		boolean result = Boolean.FALSE;
		final long levelAccounts;
		final Predicate predicate;

		final Cuenta fieldsWithZeros = new Cuenta(catalog.getCuenta(), catalog.getScuenta(), catalog.getSscuenta(),
				catalog.getSsscuenta(), catalog.getSssscuenta());
		if (!this.is5x8xAccount(fieldsWithZeros.getCuenta())) {
			validateAndAddFillZeros(fieldsWithZeros);
		}

		LOGGER.info(":: Validacion niveles previos de la cuenta: " + fieldsWithZeros);

		if (StringUtils.isNotEmpty(catalog.getScuenta()) && StringUtils.isNotEmpty(catalog.getSscuenta())
				&& StringUtils.isNotEmpty(catalog.getSsscuenta()) && StringUtils.isNotEmpty(catalog.getSssscuenta())) {

			predicate = CuentaPredicates.existsFourLevelsAccount(fieldsWithZeros.getCuenta(),
					fieldsWithZeros.getScuenta(), fieldsWithZeros.getSscuenta(), fieldsWithZeros.getSsscuenta(),
					idsector);
			levelAccounts = cuentaRepository.count(predicate);
			result = levelAccounts > ZERO;

		} else if (StringUtils.isNotEmpty(catalog.getScuenta()) && StringUtils.isNotEmpty(catalog.getSscuenta())
				&& StringUtils.isNotEmpty(catalog.getSsscuenta())) {

			predicate = CuentaPredicates.existsThreeLevelsAccount(fieldsWithZeros.getCuenta(),
					fieldsWithZeros.getScuenta(), fieldsWithZeros.getSscuenta(), idsector);
			levelAccounts = cuentaRepository.count(predicate);
			result = levelAccounts > ZERO;

		} else if (StringUtils.isNotEmpty(catalog.getScuenta()) && StringUtils.isNotEmpty(catalog.getSscuenta())) {

			predicate = CuentaPredicates.existsTwoLevelsAccount(fieldsWithZeros.getCuenta(),
					fieldsWithZeros.getScuenta(), idsector);
			levelAccounts = cuentaRepository.count(predicate);
			result = levelAccounts > ZERO;

		} else if (StringUtils.isNotEmpty(catalog.getScuenta())) {

			predicate = CuentaPredicates.existsOneLevelsAccount(fieldsWithZeros.getCuenta(), idsector);
			levelAccounts = cuentaRepository.count(predicate);
			result = levelAccounts > ZERO;

		} else {

			result = Boolean.TRUE;
		}

		if (BooleanUtils.negate(result)) {
			errorMsg.append(ERROR_PREVIOUS_LEVEL_NOT_EXIST);
		} else {
			Maycta maycta = this.mayctaRepository.findOne(MayctaPredicates.existAccount(catalog.getCuenta()));
			if (null == maycta) {
				errorMsg.append(NO_MAYCTA);
				result = Boolean.FALSE;
			} else {
				if (maycta.getNivcta() < this.getNivCta(catalog)) {
					errorMsg.append(ERROR_ACC_LEVEL_NOT);
					result = Boolean.FALSE;
				}
			}
		}

		LOGGER.info(":: Termina validacion niveles previos de la cuenta " + result);
		return result;
	}

	/*
	 * (non-Javadoc)
	 *
	 * @see com.gem.sistema.business.service.catalogos.AccountService#
	 * isValidPreviousLevelAccount(com.gem.sistema.business.domain.Cuenta)
	 */
	public boolean existAccount(final Cuenta catalog, final StringBuilder errorMsg, Long idsector) {
		final boolean result;
		final long levelAccounts;
		final Predicate predicate;

		final Cuenta fieldsWithZeros = new Cuenta(catalog.getCuenta(), catalog.getScuenta(), catalog.getSscuenta(),
				catalog.getSsscuenta(), catalog.getSssscuenta());

		if (!this.is5x8xAccount(fieldsWithZeros.getCuenta())) {
			validateAndAddFillZeros(fieldsWithZeros);
		}
		LOGGER.info(":: Validacion exista la cuenta: " + fieldsWithZeros);

		if (StringUtils.isNotEmpty(catalog.getScuenta()) && StringUtils.isNotEmpty(catalog.getSscuenta())
				&& StringUtils.isNotEmpty(catalog.getSsscuenta()) && StringUtils.isNotEmpty(catalog.getSssscuenta())) {

			predicate = CuentaPredicates.existsFiveLevelsAccount(fieldsWithZeros.getCuenta(),
					fieldsWithZeros.getScuenta(), fieldsWithZeros.getSscuenta(), fieldsWithZeros.getSsscuenta(),
					fieldsWithZeros.getSssscuenta(), idsector);
			levelAccounts = cuentaRepository.count(predicate);
			result = levelAccounts == ZERO;

		} else if (StringUtils.isNotEmpty(catalog.getScuenta()) && StringUtils.isNotEmpty(catalog.getSscuenta())
				&& StringUtils.isNotEmpty(catalog.getSsscuenta())) {

			predicate = CuentaPredicates.existsFourLevelsAccount(fieldsWithZeros.getCuenta(),
					fieldsWithZeros.getScuenta(), fieldsWithZeros.getSscuenta(), fieldsWithZeros.getSsscuenta(),
					idsector);
			levelAccounts = cuentaRepository.count(predicate);
			result = levelAccounts == ZERO;

		} else if (StringUtils.isNotEmpty(catalog.getScuenta()) && StringUtils.isNotEmpty(catalog.getSscuenta())) {

			predicate = CuentaPredicates.existsThreeLevelsAccount(fieldsWithZeros.getCuenta(),
					fieldsWithZeros.getScuenta(), fieldsWithZeros.getSscuenta(), idsector);
			levelAccounts = cuentaRepository.count(predicate);
			result = levelAccounts == ZERO;

		} else if (StringUtils.isNotEmpty(catalog.getCuenta()) && StringUtils.isNotEmpty(catalog.getScuenta())) {

			predicate = CuentaPredicates.existsTwoLevelsAccount(fieldsWithZeros.getCuenta(),
					fieldsWithZeros.getScuenta(), idsector);
			levelAccounts = cuentaRepository.count(predicate);
			result = levelAccounts == ZERO;

		} else if (StringUtils.isNotEmpty(catalog.getCuenta())) {

			predicate = CuentaPredicates.existsOneLevelsAccount(fieldsWithZeros.getCuenta(), idsector);
			levelAccounts = cuentaRepository.count(predicate);
			result = levelAccounts == ZERO;

		} else {

			result = Boolean.FALSE;
		}

		if (BooleanUtils.negate(result)) {
			errorMsg.append(ERROR_PREVIOUS_ACCOUNT_EXIST);
		}

		LOGGER.info(":: Termina validacion niveles previos de la cuenta " + result);
		return result;
	}

	/**
	 * Validate and add fill zeros.
	 *
	 * @param account the account
	 */
	private void validateAndAddFillZeros(final Cuenta account) {
		account.setScuenta(StringUtils.isNotEmpty(account.getScuenta())
				? fillZeros(account.getScuenta(), CatalogAccountsMB.LENGTH_SECOND_LEVEL) : account.getScuenta());
		account.setSscuenta(StringUtils.isNotEmpty(account.getSscuenta())
				? fillZeros(account.getSscuenta(), CatalogAccountsMB.LENGTH_THIRD_LEVEL) : account.getSscuenta());
		account.setSsscuenta(StringUtils.isNotEmpty(account.getSsscuenta())
				? fillZeros(account.getSsscuenta(), CatalogAccountsMB.LENGTH_FOUR_LEVEL) : account.getSsscuenta());
		account.setSssscuenta(StringUtils.isNotEmpty(account.getSssscuenta())
				? fillZeros(account.getSssscuenta(), CatalogAccountsMB.LENGTH_FIVE_LEVEL) : account.getSssscuenta());
	}

	/**
	 * Fill zeros.
	 *
	 * @param value the value
	 * @param length the length
	 * @return the string
	 */
	public String fillZeros(final String value, final int length) {
		if (StringUtils.isNotEmpty(value)) {
			return StringUtils.leftPad(value, length, StringUtils.EMPTY + ZERO);

		} else {
			return StringUtils.EMPTY;
		}
	}

	/**
	 * Fill right zeros.
	 *
	 * @param value the value
	 * @param length the length
	 * @return the string
	 */
	public String fillRightZeros(final String value, final int length) {
		if (StringUtils.isNotEmpty(value)) {
			return StringUtils.rightPad(value, length, StringUtils.EMPTY + ZERO);

		} else {
			return StringUtils.EMPTY;
		}
	}

	/**
	 * Fill or cut left.
	 *
	 * @param value the value
	 * @param length the length
	 * @return the string
	 */
	private String fillOrCutLeft(final String value, final int length) {
		String toReturn = StringUtils.EMPTY;
		if (!StringUtils.isEmpty(value)) {
			if (value.length() > length) {
				toReturn = StringUtils.substring(value, value.length() - length);
			} else {
				toReturn = this.fillZeros(value, length);
			}
		}
		return toReturn;
	}

	/*
	 * (non-Javadoc)
	 *
	 * @see com.gem.sistema.business.service.catalogos.AccountService#
	 * getListAutogeneratedAccountByExpenditure(java.lang.String)
	 */
	public List<String> getListAutogeneratedAccountByExpenditure(final String typeAccount) {
		final List<String> accountAutogeneratedBudget = new ArrayList<String>();
		if (typeAccount.equalsIgnoreCase(ACCOUNT_EXPEDITURE_51)) {
			accountAutogeneratedBudget.add(ACCOUNT_AUTOGENERATED_BUDGET_8211);
			accountAutogeneratedBudget.add(ACCOUNT_AUTOGENERATED_BUDGET_8221);
			accountAutogeneratedBudget.add(ACCOUNT_AUTOGENERATED_BUDGET_8241);
			accountAutogeneratedBudget.add(ACCOUNT_AUTOGENERATED_BUDGET_8251);
			accountAutogeneratedBudget.add(ACCOUNT_AUTOGENERATED_BUDGET_8271);
		}
		if (typeAccount.equalsIgnoreCase(ACCOUNT_EXPEDITURE_52)) {
			accountAutogeneratedBudget.add(ACCOUNT_AUTOGENERATED_BUDGET_8212);
			accountAutogeneratedBudget.add(ACCOUNT_AUTOGENERATED_BUDGET_8222);
			accountAutogeneratedBudget.add(ACCOUNT_AUTOGENERATED_BUDGET_8242);
			accountAutogeneratedBudget.add(ACCOUNT_AUTOGENERATED_BUDGET_8252);
			accountAutogeneratedBudget.add(ACCOUNT_AUTOGENERATED_BUDGET_8272);
		}
		if (typeAccount.equalsIgnoreCase(ACCOUNT_EXPEDITURE_53)) {
			accountAutogeneratedBudget.add(ACCOUNT_AUTOGENERATED_BUDGET_8213);
			accountAutogeneratedBudget.add(ACCOUNT_AUTOGENERATED_BUDGET_8223);
			accountAutogeneratedBudget.add(ACCOUNT_AUTOGENERATED_BUDGET_8243);
			accountAutogeneratedBudget.add(ACCOUNT_AUTOGENERATED_BUDGET_8253);
			accountAutogeneratedBudget.add(ACCOUNT_AUTOGENERATED_BUDGET_8273);
		}
		if (typeAccount.equalsIgnoreCase(ACCOUNT_EXPEDITURE_54)) {
			accountAutogeneratedBudget.add(ACCOUNT_AUTOGENERATED_BUDGET_8214);
			accountAutogeneratedBudget.add(ACCOUNT_AUTOGENERATED_BUDGET_8224);
			accountAutogeneratedBudget.add(ACCOUNT_AUTOGENERATED_BUDGET_8244);
			accountAutogeneratedBudget.add(ACCOUNT_AUTOGENERATED_BUDGET_8254);
			accountAutogeneratedBudget.add(ACCOUNT_AUTOGENERATED_BUDGET_8274);
		}
		if (typeAccount.equalsIgnoreCase(ACCOUNT_EXPEDITURE_56)) {
			accountAutogeneratedBudget.add(ACCOUNT_AUTOGENERATED_BUDGET_8215);
			accountAutogeneratedBudget.add(ACCOUNT_AUTOGENERATED_BUDGET_8225);
			accountAutogeneratedBudget.add(ACCOUNT_AUTOGENERATED_BUDGET_8245);
			accountAutogeneratedBudget.add(ACCOUNT_AUTOGENERATED_BUDGET_8255);
			accountAutogeneratedBudget.add(ACCOUNT_AUTOGENERATED_BUDGET_8275);
		}
		if (typeAccount.equalsIgnoreCase(ACCOUNT_EXPEDITURE_57)) {
			accountAutogeneratedBudget.add(ACCOUNT_AUTOGENERATED_BUDGET_8216);
			accountAutogeneratedBudget.add(ACCOUNT_AUTOGENERATED_BUDGET_8226);
			accountAutogeneratedBudget.add(ACCOUNT_AUTOGENERATED_BUDGET_8246);
			accountAutogeneratedBudget.add(ACCOUNT_AUTOGENERATED_BUDGET_8256);
			accountAutogeneratedBudget.add(ACCOUNT_AUTOGENERATED_BUDGET_8276);
		}
		return accountAutogeneratedBudget;
	}

	/**
	 * Gets the autogenerated budget account.
	 *
	 * @param catalog the catalog
	 * @return the autogenerated budget account
	 */
	public List<Cuenta> getAutogeneratedBudgetAccount(final Cuenta catalog) {
		final List<Cuenta> generatedAccounts = new ArrayList<Cuenta>();
		final String accountType = catalog.getCuenta().substring(ZERO, TWO);
		final List<String> accountAutoGeneratedBudget = this.getListAutogeneratedAccountByExpenditure(accountType);
		for (final String budgetAccount : accountAutoGeneratedBudget) {
			generatedAccounts.add(this.populateAcc(
					new Cuenta(budgetAccount, catalog.getScuenta(), catalog.getSscuenta(), catalog.getSsscuenta()),
					catalog));
		}
		return generatedAccounts;
	}

	/**
	 * Save generated rows.
	 *
	 * @param listSave the list save
	 * @param original the original
	 * @return the list
	 */
	private List<Cuenta> saveGeneratedRows(final List<Cuenta> listSave, final Cuenta original) {
		listSave.add(ZERO, this.populateAcc(original, original));
		return IterableUtils.toList(cuentaRepository.save(listSave));

	}

	/**
	 * Save account.
	 *
	 * @param cuenta the cuenta
	 * @return the cuenta
	 */
	public Cuenta saveAccount(Cuenta cuenta) {
		cuenta.setAbonos1(BigDecimal.ZERO);
		cuenta.setAbonos2(BigDecimal.ZERO);
		cuenta.setAbonos3(BigDecimal.ZERO);
		cuenta.setAbonos4(BigDecimal.ZERO);
		cuenta.setAbonos5(BigDecimal.ZERO);
		cuenta.setAbonos6(BigDecimal.ZERO);
		cuenta.setAbonos7(BigDecimal.ZERO);
		cuenta.setAbonos8(BigDecimal.ZERO);
		cuenta.setAbonos9(BigDecimal.ZERO);
		cuenta.setAbonos10(BigDecimal.ZERO);
		cuenta.setAbonos11(BigDecimal.ZERO);
		cuenta.setAbonos12(BigDecimal.ZERO);
		cuenta.setAbonos13(BigDecimal.ZERO);
		cuenta.setAbonos14(BigDecimal.ZERO);
		cuenta.setAbonos15(BigDecimal.ZERO);
		cuenta.setAbonos16(BigDecimal.ZERO);
		cuenta.setCargos1(BigDecimal.ZERO);
		cuenta.setCargos2(BigDecimal.ZERO);
		cuenta.setCargos3(BigDecimal.ZERO);
		cuenta.setCargos4(BigDecimal.ZERO);
		cuenta.setCargos5(BigDecimal.ZERO);
		cuenta.setCargos6(BigDecimal.ZERO);
		cuenta.setCargos7(BigDecimal.ZERO);
		cuenta.setCargos8(BigDecimal.ZERO);
		cuenta.setCargos9(BigDecimal.ZERO);
		cuenta.setCargos10(BigDecimal.ZERO);
		cuenta.setCargos11(BigDecimal.ZERO);
		cuenta.setCargos12(BigDecimal.ZERO);
		cuenta.setCargos13(BigDecimal.ZERO);
		cuenta.setCargos14(BigDecimal.ZERO);
		cuenta.setCargos15(BigDecimal.ZERO);
		cuenta.setCargos16(BigDecimal.ZERO);
		if(cuenta.getIdsector() == 1){
			cuenta.setIdRef(0l);
		}else{
			cuenta.setIdRef(1l);
		}
		cuenta.setUserid(cuenta.getCapcta());
		return cuentaRepository.save(cuenta);

	}

	/*
	 * (non-Javadoc)
	 *
	 * @see com.gem.sistema.business.service.catalogos.AccountService#
	 * getListAutogeneratedAccountBudgetByIncome(com.gem.sistema.business.domain
	 * .Cuenta)
	 */
	public List<Cuenta> getListAutogeneratedAccountBudgetByIncome(final Cuenta account) {
		final List<Cuenta> accountAutogeneratedBudget = new ArrayList<Cuenta>();
		if (AccountServiceImpl.getCuentaLevel(account) == Constants.TWO) {
			Cuenta cuentaFisrtLevel = new Cuenta();
			cuentaFisrtLevel.setCuenta(account.getCuenta());
			cuentaFisrtLevel.setIdsector(account.getIdsector());
			cuentaFisrtLevel.setNomcta(account.getNomcta());
			cuentaFisrtLevel.setSalini(account.getSalini());
			// accountAutogeneratedBudget
			// .add(this.populateAcc(this.newAccountBudgetByIncome(account,
			// cuentaFisrtLevel), cuentaFisrtLevel));
			Cuenta buff = this.populateAcc(
					this.newAccountBudgetByIncome(cuentaFisrtLevel, new Cuenta(ACCOUNT_AUTOGENERATED_INCOME_8110,
							cuentaFisrtLevel.getNomcta(), cuentaFisrtLevel.getSalini())),
					cuentaFisrtLevel);

			if (!this.cuentaRepository.exists(CuentaPredicates.findByAccounComposite(buff))) {
				accountAutogeneratedBudget.add(buff);
			}
			buff = this.populateAcc(
					this.newAccountBudgetByIncome(cuentaFisrtLevel, new Cuenta(ACCOUNT_AUTOGENERATED_INCOME_8120,
							cuentaFisrtLevel.getNomcta(), cuentaFisrtLevel.getSalini())),
					cuentaFisrtLevel);
			if (!this.cuentaRepository.exists(CuentaPredicates.findByAccounComposite(buff))) {
				accountAutogeneratedBudget.add(buff);
			}

			buff = this.populateAcc(
					this.newAccountBudgetByIncome(cuentaFisrtLevel, new Cuenta(ACCOUNT_AUTOGENERATED_INCOME_8130,
							cuentaFisrtLevel.getNomcta(), cuentaFisrtLevel.getSalini())),
					cuentaFisrtLevel);
			if (!this.cuentaRepository.exists(CuentaPredicates.findByAccounComposite(buff))) {
				accountAutogeneratedBudget.add(buff);
			}

			buff = this.populateAcc(
					this.newAccountBudgetByIncome(cuentaFisrtLevel, new Cuenta(ACCOUNT_AUTOGENERATED_INCOME_8140,
							cuentaFisrtLevel.getNomcta(), cuentaFisrtLevel.getSalini())),
					cuentaFisrtLevel);
			if (!this.cuentaRepository.exists(CuentaPredicates.findByAccounComposite(buff))) {
				accountAutogeneratedBudget.add(buff);
			}

			buff = this.populateAcc(
					this.newAccountBudgetByIncome(cuentaFisrtLevel, new Cuenta(ACCOUNT_AUTOGENERATED_INCOME_8150,
							cuentaFisrtLevel.getNomcta(), cuentaFisrtLevel.getSalini())),
					cuentaFisrtLevel);
			if (!this.cuentaRepository.exists(CuentaPredicates.findByAccounComposite(buff))) {
				accountAutogeneratedBudget.add(buff);
			}
		}
		accountAutogeneratedBudget.add(this.populateAcc(
				this.newAccountBudgetByIncome(account,
						new Cuenta(ACCOUNT_AUTOGENERATED_INCOME_8110, account.getNomcta(), account.getSalini())),
				account));
		accountAutogeneratedBudget.add(this.populateAcc(
				this.newAccountBudgetByIncome(account,
						new Cuenta(ACCOUNT_AUTOGENERATED_INCOME_8120, account.getNomcta(), account.getSalini())),
				account));
		accountAutogeneratedBudget.add(this.populateAcc(
				this.newAccountBudgetByIncome(account,
						new Cuenta(ACCOUNT_AUTOGENERATED_INCOME_8130, account.getNomcta(), account.getSalini())),
				account));
		accountAutogeneratedBudget.add(this.populateAcc(
				this.newAccountBudgetByIncome(account,
						new Cuenta(ACCOUNT_AUTOGENERATED_INCOME_8140, account.getNomcta(), account.getSalini())),
				account));
		accountAutogeneratedBudget.add(this.populateAcc(
				this.newAccountBudgetByIncome(account,
						new Cuenta(ACCOUNT_AUTOGENERATED_INCOME_8150, account.getNomcta(), account.getSalini())),
				account));
		return accountAutogeneratedBudget;
	}

	/**
	 * New account budget by income.
	 *
	 * @param account the account
	 * @param newAccount the new account
	 * @return the cuenta
	 */
	private Cuenta newAccountBudgetByIncome(Cuenta account, Cuenta newAccount) {
		if (!StringUtils.isEmpty(account.getCuenta())) {
			newAccount.setScuenta(this.fillOrCutLeft(account.getCuenta(), CatalogAccountsMB.LENGTH_SECOND_LEVEL));
		}
		if (!StringUtils.isEmpty(account.getScuenta())) {
			newAccount.setSscuenta(this.fillOrCutLeft(account.getScuenta(), CatalogAccountsMB.LENGTH_THIRD_LEVEL));
		}
		if (!StringUtils.isEmpty(account.getSscuenta())) {
			newAccount.setSsscuenta(this.fillOrCutLeft(account.getSscuenta(), CatalogAccountsMB.LENGTH_FOUR_LEVEL));
		}
		if (!StringUtils.isEmpty(account.getSsscuenta())) {
			newAccount.setSssscuenta(this.fillOrCutLeft(account.getSsscuenta(), CatalogAccountsMB.LENGTH_FIVE_LEVEL));
		}
		return newAccount;
	}

	/*
	 * (non-Javadoc)
	 *
	 * @see com.gem.sistema.business.service.catalogos.AccountService#
	 * getListAutogeneratedAccountBudgetByExpenditure(com.gem.sistema.business.
	 * domain.Cuenta)
	 */
	public List<Cuenta> getListAutogeneratedAccountBudgetByExpenditure(final Cuenta account) {
		final List<Cuenta> accountAutogeneratedBudget = new ArrayList<Cuenta>();
		accountAutogeneratedBudget.add(this.populateAcc(new Cuenta(ACCOUNT_AUTOGENERATED_INCOME_8227,
				account.getScuenta(), account.getSscuenta(), account.getSsscuenta()), account));
		accountAutogeneratedBudget.add(this.populateAcc(new Cuenta(ACCOUNT_AUTOGENERATED_INCOME_8247,
				account.getScuenta(), account.getSscuenta(), account.getSsscuenta()), account));
		accountAutogeneratedBudget.add(this.populateAcc(new Cuenta(ACCOUNT_AUTOGENERATED_INCOME_8257,
				account.getScuenta(), account.getSscuenta(), account.getSsscuenta()), account));
		accountAutogeneratedBudget.add(this.populateAcc(new Cuenta(ACCOUNT_AUTOGENERATED_INCOME_8277,
				account.getScuenta(), account.getSscuenta(), account.getSsscuenta()), account));

		return accountAutogeneratedBudget;
	}

	/* (non-Javadoc)
	 * @see com.gem.sistema.business.service.catalogos.AccountService#isContableAccount(java.lang.String)
	 */
	public Boolean isContableAccount(String cuenta) {
		return cuenta.matches(CONTABLES_PATTER);
	}

	/* (non-Javadoc)
	 * @see com.gem.sistema.business.service.catalogos.AccountService#is5xAccount(java.lang.String)
	 */
	public Boolean is5xAccount(String cuenta) {
		return cuenta.matches(ACCOUNT_TYPE_5X_REGEXP);
	}

	/**
	 * Checks if is 5 x 8 x account.
	 *
	 * @param cuenta the cuenta
	 * @return the boolean
	 */
	public Boolean is5x8xAccount(String cuenta) {
		return cuenta.matches(ACCOUNT_TYPE_5X8X_REGEXP);
	}

	/* (non-Javadoc)
	 * @see com.gem.sistema.business.service.catalogos.AccountService#isMayorAccount(com.gem.sistema.business.domain.Cuenta)
	 */
	public Boolean isMayorAccount(Cuenta account) {
		return mayctaRepository.exists(MayctaPredicates.existAccount(account.getCuenta()));
	}

	/* (non-Javadoc)
	 * @see com.gem.sistema.business.service.catalogos.AccountService#getNivCta(com.gem.sistema.business.domain.Cuenta)
	 */
	public int getNivCta(Cuenta catalog) {
		return AccountServiceImpl.getCuentaLevel(catalog);
	}

	/**
	 * Gets the cuenta level.
	 *
	 * @param catalog the catalog
	 * @return the cuenta level
	 */
	public static int getCuentaLevel(Cuenta catalog) {
		int result = 0;
		if (StringUtils.isNotEmpty(catalog.getScuenta()) && StringUtils.isNotEmpty(catalog.getSscuenta())
				&& StringUtils.isNotEmpty(catalog.getSsscuenta()) && StringUtils.isNotEmpty(catalog.getSssscuenta())) {
			result = Constants.FIVE;
		} else if (StringUtils.isNotEmpty(catalog.getScuenta()) && StringUtils.isNotEmpty(catalog.getSscuenta())
				&& StringUtils.isNotEmpty(catalog.getSsscuenta())) {
			result = Constants.FOUR;
		} else if (StringUtils.isNotEmpty(catalog.getScuenta()) && StringUtils.isNotEmpty(catalog.getSscuenta())) {
			result = Constants.THREE;
		} else if (StringUtils.isNotEmpty(catalog.getCuenta()) && StringUtils.isNotEmpty(catalog.getScuenta())) {
			result = Constants.TWO;
		} else if (StringUtils.isNotEmpty(catalog.getCuenta())) {
			result = Constants.ONE;
		}
		return result;
	}

	/* (non-Javadoc)
	 * @see com.gem.sistema.business.service.catalogos.AccountService#populateAcc(com.gem.sistema.business.domain.Cuenta, com.gem.sistema.business.domain.Cuenta)
	 */
	public Cuenta populateAcc(Cuenta account, Cuenta original) {
		account.setXnicta(this.getNivCta(account));
		Maycta maycta = this.mayctaRepository.findOne(MayctaPredicates.existAccount(account.getCuenta()));
		if (maycta.getNivcta().intValue() == AccountServiceImpl.getCuentaLevel(account)) {
			account.setNivcta("S");
		} else {
			account.setNivcta("N");
		}

		account.setStacta(maycta.getNatcta());
		account.setNotcta(maycta.getNotcta());
		account.setUserid(original.getUserid());
		account.setIdsector(original.getIdsector());
		if (null == original.getSalini() || original.getSalini().compareTo(BigDecimal.ZERO) == 0) {
			account.setSalini(BigDecimal.ZERO);
		}
		// account.setNomcta(maycta.getNommay());
		if (account.getXnicta() == Constants.TWO && this.isContableAccount(original.getCuenta())) {
			if (StringUtils.startsWith(original.getCuenta(), Constants.PREFIX_ACCOUNT_MAJOR)) {
				account.setNomcta(original.getNomcta());
			} else {
				account.setNomcta(this.catdepRepository
						.findOne(DependencePredicates.getPredicatetCveDep(original.getScuenta())).getNomdep());
			}
		}
		if (account.getXnicta() == Constants.THREE && this.isContableAccount(original.getCuenta())) {
			if (StringUtils.startsWith(original.getCuenta(), Constants.PREFIX_ACCOUNT_MAJOR)) {
				account.setNomcta(original.getNomcta());
			} else {

				account.setNomcta(this.catdepRepository
						.findOne(DependencePredicates.getPredicatetCveDep(original.getScuenta())).getNomdep()
						+ " "
						+ this.muniNepRepository.findOne(MuniNepPredicates.getPredicateToPrograms(
								StringUtils.substring(original.getSscuenta(), ZERO, 12),
								original.getIdsector().intValue())).getCampo6());
			}
		}
		if (account.getXnicta() == Constants.FOUR) {

			if (this.isContableAccount(original.getCuenta())) {
				if (StringUtils.startsWith(original.getCuenta(), Constants.PREFIX_ACCOUNT_MAJOR)) {
					account.setNomcta(original.getNomcta());
				} else {
					account.setNomcta(this.natgasRepository.findOne(
							NatgasPredicates.existNatgas(original.getSsscuenta(), original.getIdsector().intValue()))
							.getNomgas());
				}
			}
		}

		System.out.println("entra a acoount");
		account.setAbonos1(BigDecimal.ZERO);
		account.setAbonos2(BigDecimal.ZERO);
		account.setAbonos3(BigDecimal.ZERO);
		account.setAbonos4(BigDecimal.ZERO);
		account.setAbonos5(BigDecimal.ZERO);
		account.setAbonos6(BigDecimal.ZERO);
		account.setAbonos7(BigDecimal.ZERO);
		account.setAbonos8(BigDecimal.ZERO);
		account.setAbonos9(BigDecimal.ZERO);
		account.setAbonos10(BigDecimal.ZERO);
		account.setAbonos11(BigDecimal.ZERO);
		account.setAbonos12(BigDecimal.ZERO);
		account.setAbonos13(BigDecimal.ZERO);
		account.setAbonos14(BigDecimal.ZERO);
		account.setAbonos15(BigDecimal.ZERO);
		account.setAbonos16(BigDecimal.ZERO);
		account.setCargos1(BigDecimal.ZERO);
		account.setCargos2(BigDecimal.ZERO);
		account.setCargos3(BigDecimal.ZERO);
		account.setCargos4(BigDecimal.ZERO);
		account.setCargos5(BigDecimal.ZERO);
		account.setCargos6(BigDecimal.ZERO);
		account.setCargos7(BigDecimal.ZERO);
		account.setCargos8(BigDecimal.ZERO);
		account.setCargos9(BigDecimal.ZERO);
		account.setCargos10(BigDecimal.ZERO);
		account.setCargos11(BigDecimal.ZERO);
		account.setCargos12(BigDecimal.ZERO);
		account.setCargos13(BigDecimal.ZERO);
		account.setCargos14(BigDecimal.ZERO);
		account.setCargos15(BigDecimal.ZERO);
		account.setCargos16(BigDecimal.ZERO);
		return account;
	}

	/* (non-Javadoc)
	 * @see com.gem.sistema.business.service.catalogos.AccountService#existDependency(java.lang.String)
	 */
	@Override
	public Boolean existDependency(String dependency) {
		return this.catdepRepository.exists(DependencePredicates.getPredicatetCveDep(dependency));
	}

	/* (non-Javadoc)
	 * @see com.gem.sistema.business.service.catalogos.AccountService#existXcatpro(java.lang.String, java.lang.Integer)
	 */
	@Override
	public Boolean existXcatpro(String clvpro, Integer idSector) {
		return this.muniNepRepository
				.exists(MuniNepPredicates.getPredicateToPrograms(StringUtils.substring(clvpro, ZERO, 12), idSector));
	}

	/* (non-Javadoc)
	 * @see com.gem.sistema.business.service.catalogos.AccountService#existNatgas(java.lang.String, java.lang.Integer)
	 */
	@Override
	public Boolean existNatgas(String clvgas, Integer idSector) {
		return this.natgasRepository.exists(NatgasPredicates.existNatgas(clvgas, idSector));
	}

	/* (non-Javadoc)
	 * @see com.gem.sistema.business.service.catalogos.AccountService#delete(com.gem.sistema.business.domain.Cuenta)
	 */
	@Override
	public String delete(Cuenta cuenta) {
		String messageReturn = StringUtils.EMPTY;
		LOGGER.info(":: Borrar registro catalogAccountsMB " + cuenta);
		if (BooleanUtils.negate(cuenta.getId().intValue() == ZERO)) {
			if (cuenta.getSalini() == null || cuenta.getSalini().compareTo(BigDecimal.ZERO) == 0) {
				if (this.getNivCta(cuenta) == Constants.ONE) {
					messageReturn = MESSAGE_MAYOR_NODELETE;
				} else {
					if (this.isInPoliza(cuenta)) {
						messageReturn = MESSAGE_ACC_USEONPOLICY;
					} else {
						if (this.hasChilds(cuenta)) {
							messageReturn = MESSAGE_ACC_HASCHILD;
						} else {
							if (cuenta.getCuenta().matches(ACC_BUDGET_EXC_REGEX)) {
								messageReturn = MESSAGE_ACC_BUDGET_NODELETE;
							} else {
								if (this.polideRepository.count(PolidePredicate.findByAccounComposite(cuenta)) > 0) {
									messageReturn = "No se puede borrar la cuenta, por que se encuentra asociada con polizas.";
								} else {
									if (hasBudgetBalance(cuenta)) {
										messageReturn = "No se puede borrar la cuenta, por que las cuentas presupuestales tienen saldos.";
									} else {
										cuentaRepository.delete(cuenta);
										this.proccesBudgetDelete(cuenta);
									}
								}
							}
						}
					}
				}
			} else {
				messageReturn = MESSAGE_ACC_HASBALANCE;
			}

		} else {
			messageReturn = MESSAGE_NODELETED_RECORD;
		}
		return messageReturn;
	}

	/**
	 * Checks for budget balance.
	 *
	 * @param cuenta the cuenta
	 * @return true, if successful
	 */
	private boolean hasBudgetBalance(Cuenta cuenta) {

		List<Cuenta> accs = null;
		BigDecimal balance = BigDecimal.ZERO;

		if (cuenta.getCuenta().matches(ACCOUNT_TYPE_8217_REGEXP)) {
			accs = this.getListAutogeneratedAccountBudgetByExpenditure(cuenta);
		} else {
			if (cuenta.getCuenta().matches(ACC_INCOMES_REGEX)) {
				accs = this.getListAutogeneratedAccountBudgetByIncome(cuenta);
			} else {
				accs = this.getAutogeneratedBudgetAccount(cuenta);
			}
		}

		if (null != accs) {
			for (Cuenta cuenta2 : accs) {
				Cuenta ctabuff = this.cuentaRepository.findOne(CuentaPredicates.existsFiveLevelsAccount(cuenta2));
				if (null != ctabuff) {
					balance = balance.add(ctabuff.getSalini());
				}
			}
		}
		return balance.compareTo(BigDecimal.ZERO) != 0;
	}

	/**
	 * Procces budget delete.
	 *
	 * @param cuenta the cuenta
	 */
	private void proccesBudgetDelete(Cuenta cuenta) {

		List<Cuenta> accs = null;

		if (cuenta.getCuenta().matches(ACCOUNT_TYPE_8217_REGEXP)) {
			accs = this.getListAutogeneratedAccountBudgetByExpenditure(cuenta);
		} else {
			if (cuenta.getCuenta().matches(ACC_INCOMES_REGEX)) {
				accs = this.getListAutogeneratedAccountBudgetByIncome(cuenta);
			} else {
				accs = this.getAutogeneratedBudgetAccount(cuenta);
			}
		}

		if (null != accs) {
			for (Cuenta cuenta2 : accs) {
				Cuenta ctabuff = this.cuentaRepository.findOne(CuentaPredicates.existsFiveLevelsAccount(cuenta2));
				if (null != ctabuff && !this.isInPoliza(ctabuff) && ctabuff.getSalini().compareTo(ZERO_DOUBLE) == 0) {
					this.cuentaRepository.delete(ctabuff);
				}
			}
		}
	}

	/**
	 * Checks if is in poliza.
	 *
	 * @param cuenta the cuenta
	 * @return true, if is in poliza
	 */
	private boolean isInPoliza(Cuenta cuenta) {
		return this.polideRepository.count(PolidePredicate.findByAccounComposite(cuenta)) > 0;
	}

	/* (non-Javadoc)
	 * @see com.gem.sistema.business.service.catalogos.AccountService#hasChilds(com.gem.sistema.business.domain.Cuenta)
	 */
	public boolean hasChilds(Cuenta cuenta) {
		return this.cuentaRepository.count(CuentaPredicates.findByAccounComposite(cuenta)) > 1;
	}

	/* (non-Javadoc)
	 * @see com.gem.sistema.business.service.catalogos.AccountService#validate(com.gem.sistema.load.fileupload.validators.results.EgresResultBean, com.gem.sistema.business.domain.Cuenta)
	 */
	@Override
	public EgresResultBean validate(EgresResultBean egresoResult, Cuenta cuenta) {
		egresoResult.setE9(BooleanUtils
				.toIntegerObject(!this.cuentaRepository.exists(CuentaPredicates.findByAccounComposite(cuenta))));
		List<Cuenta> accs = this.getAutogeneratedBudgetAccount(cuenta);
		for (Cuenta cuenta2 : accs) {
			if (cuenta2.getCuenta().matches(EGRESO_E10_REGEX)) {
				egresoResult.setE10(BooleanUtils.toIntegerObject(
						!this.cuentaRepository.exists(CuentaPredicates.findByAccounComposite(cuenta2))));
			}
			if (cuenta2.getCuenta().matches(EGRESO_E11_REGEX)) {
				egresoResult.setE11(BooleanUtils.toIntegerObject(
						!this.cuentaRepository.exists(CuentaPredicates.findByAccounComposite(cuenta2))));
			}
			if (cuenta2.getCuenta().matches(EGRESO_E12_REGEX)) {
				egresoResult.setE12(BooleanUtils.toIntegerObject(
						!this.cuentaRepository.exists(CuentaPredicates.findByAccounComposite(cuenta2))));
			}
			if (cuenta2.getCuenta().matches(EGRESO_E13_REGEX)) {
				egresoResult.setE13(BooleanUtils.toIntegerObject(
						!this.cuentaRepository.exists(CuentaPredicates.findByAccounComposite(cuenta2))));
			}
			if (cuenta2.getCuenta().matches(EGRESO_E14_REGEX)) {
				egresoResult.setE14(BooleanUtils.toIntegerObject(
						!this.cuentaRepository.exists(CuentaPredicates.findByAccounComposite(cuenta2))));
			}
		}
		return egresoResult;
	}

	/* (non-Javadoc)
	 * @see com.gem.sistema.business.service.catalogos.AccountService#getEgresoAcc(com.gem.sistema.business.domain.Cuenta)
	 */
	@Override
	public List<Cuenta> getEgresoAcc(Cuenta cuenta) {
		if (!this.cuentaRepository.exists(CuentaPredicates.findByAccounComposite(cuenta))) {
			Maycta maycta = this.mayctaRepository.findOne(MayctaPredicates.existAccount(cuenta.getCuenta()));
			cuenta.setCuenta(maycta.getCuenta());
			cuenta.setNomcta(maycta.getNommay());
			cuenta.setStacta(maycta.getNatcta());
			cuenta.setNotcta(maycta.getNotcta());
			return this.saveGeneratedRows(this.getAutogeneratedBudgetAccount(cuenta), cuenta);
		} else {
			cuenta = this.cuentaRepository.findOne(CuentaPredicates.findByAccounComposite(cuenta));
			List<Cuenta> accs = this.getAutogeneratedBudgetAccount(cuenta);
			for (Cuenta cuenta2 : accs) {
				if (!this.cuentaRepository.exists(CuentaPredicates.findByAccounComposite(cuenta2))) {
					cuenta2 = this.cuentaRepository.save(cuenta2);
				}
			}
			accs.add(ZERO, this.populateAcc(cuenta, cuenta));
			return accs;
		}
	}

	/*
	 * (non-Javadoc)
	 *
	 * @see com.gem.sistema.business.service.catalogos.AccountService#
	 * getAccountbyChapter(java.lang.Integer)
	 */
	@Override
	public Cuenta getAccountbyChapter(int chapter) {

		Cuenta cuenta = new Cuenta();

		switch (chapter) {

		case Constants.ONE: {
			cuenta.setCuenta(CUENTA_CAP1);
			break;
		}
		case Constants.TWO: {
			cuenta.setCuenta(CUENTA_CAP2);
			break;
		}
		case Constants.THREE: {
			cuenta.setCuenta(CUENTA_CAP3);
			break;
		}
		case Constants.FOUR: {
			cuenta.setCuenta(CUENTA_CAP4);
			break;
		}
		case Constants.FIVE: {
			cuenta.setCuenta(CUENTA_CAP5);
			break;
		}
		case Constants.SIX: {
			cuenta.setCuenta(CUENTA_CAP6);
			break;
		}
		case Constants.SEVEN: {
			cuenta.setCuenta(CUENTA_CAP7);
			break;
		}
		case Constants.EIGHT: {
			cuenta.setCuenta(CUENTA_CAP8);
			break;
		}
		case Constants.NINE: {
			cuenta.setCuenta(CUENTA_CAP9);
			break;
		}
		default:
			cuenta.setCuenta("");

		}

		return cuenta;
	}

	/* (non-Javadoc)
	 * @see com.gem.sistema.business.service.catalogos.AccountService#isLastLevelAcc(com.gem.sistema.business.domain.Cuenta)
	 */
	public boolean isLastLevelAcc(Cuenta cuenta) {
		int nivCta = this.getNivCta(cuenta);
		return ((cuenta.getCuenta().matches(CONTABLES_PATTER) && nivCta == Constants.FOUR)
				|| (nivCta == Constants.FIVE));
	}

	/* (non-Javadoc)
	 * @see com.gem.sistema.business.service.catalogos.AccountService#resetAccounts(java.lang.Long)
	 */
	public void resetAccounts(Long idSector) {
		cuentaRepository.resetAccounts(idSector);
	}

	/* (non-Javadoc)
	 * @see com.gem.sistema.business.service.catalogos.AccountService#findToUpdateForFileReset(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.Long)
	 */
	public List<Cuenta> findToUpdateForFileReset(String cuenta, String scta, String sscta, String ssscta,
			String sssscta, Long idSector) {

		if (is5xAccount(cuenta)) {
			scta = fillRightZeros(scta, 10);
			sscta = fillRightZeros(sscta, 15);
			ssscta = fillRightZeros(ssscta, 4);
			sssscta = fillRightZeros(sssscta, 3);
		} else {
			scta = fillZeros(scta, 10);
			sscta = fillZeros(sscta, 15);
			ssscta = fillZeros(ssscta, 4);
			sssscta = fillZeros(sssscta, 3);
		}
		return cuentaRepository.findOneByCuentaAndScuentaAndSscuentaAndSsscuentaAndSssscuentaAndIdsector(cuenta, scta,
				sscta, ssscta, sssscta, idSector);

	}

	/* (non-Javadoc)
	 * @see com.gem.sistema.business.service.catalogos.AccountService#updateSaliniToAccounts(java.util.List, double)
	 */
	public void updateSaliniToAccounts(List<Cuenta> cuentas, double salini) {
		for (Cuenta cuenta : cuentas) {
			cuenta.setSalini(BigDecimal.valueOf(salini));
			cuentaRepository.save(cuenta);
		}
	}

	/* (non-Javadoc)
	 * @see com.gem.sistema.business.service.catalogos.AccountService#findAccountsToBackup(java.lang.Long)
	 */
	public List<Cuenta> findAccountsToBackup(Long idSector) {
		return cuentaRepository.findAccountsToBackup(idSector);
	}

	/* (non-Javadoc)
	 * @see com.gem.sistema.business.service.catalogos.AccountService#findFirstByCuentaAndScuentaAndSscuentaAndSsscuentaAndSssscuentaAndIdsector(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.Long)
	 */
	public Cuenta findFirstByCuentaAndScuentaAndSscuentaAndSsscuentaAndSssscuentaAndIdsector(String cuenta,
			String scuenta, String sscuenta, String ssscuenta, String sssscuenta, Long idSector) {
		return cuentaRepository.findFirstByCuentaAndScuentaAndSscuentaAndSsscuentaAndSssscuentaAndIdsector(cuenta,
				scuenta, sscuenta, ssscuenta, sssscuenta, idSector);
	}

	/* (non-Javadoc)
	 * @see com.gem.sistema.business.service.catalogos.AccountService#findAllByIdsectorAndCuenta(java.lang.Long, java.lang.String)
	 */
	public List<Cuenta> findAllByIdsectorAndCuenta(Long idSector,String cuenta){
		return cuentaRepository.findAllByIdsectorAndCuenta(idSector,cuenta);
	}
  
  /* (non-Javadoc)
   * @see com.gem.sistema.business.service.catalogos.AccountService#findFirstByCuentaAndScuentaAndSscuentaAndIdsector(java.lang.String, java.lang.String, java.lang.String, java.lang.Long)
   */
  public Cuenta findFirstByCuentaAndScuentaAndSscuentaAndIdsector(String cta, String scta, String sscta, Long idsector){
    return cuentaRepository.findFirstByCuentaAndScuentaAndSscuentaAndIdsector(cta,scta,sscta,idsector);
  }

	// /**
	// * @return the xcatproRepository
	// */
	// public XcatproRepository getXcatproRepository() {
	// return xcatproRepository;
	// }
	//
	// /**
	// * @param xcatproRepository
	// * the xcatproRepository to set
	// */
	// public void setXcatproRepository(XcatproRepository xcatproRepository) {
	// this.xcatproRepository = xcatproRepository;
	// }

	/**
	 * Gets the maycta repository.
	 *
	 * @return the mayctaRepository
	 */
	public MayctaRepository getMayctaRepository() {
		return mayctaRepository;
	}

	/**
	 * Sets the maycta repository.
	 *
	 * @param mayctaRepository            the mayctaRepository to set
	 */
	public void setMayctaRepository(MayctaRepository mayctaRepository) {
		this.mayctaRepository = mayctaRepository;
	}

	/**
	 * Gets the natgas repository.
	 *
	 * @return the natgasRepository
	 */
	public NatgasRepository getNatgasRepository() {
		return natgasRepository;
	}

	/**
	 * Sets the natgas repository.
	 *
	 * @param natgasRepository            the natgasRepository to set
	 */
	public void setNatgasRepository(NatgasRepository natgasRepository) {
		this.natgasRepository = natgasRepository;
	}

	/**
	 * Gets the poliza repository.
	 *
	 * @return the polizaRepository
	 */
	public PolizaRepository getPolizaRepository() {
		return polizaRepository;
	}

	/**
	 * Sets the poliza repository.
	 *
	 * @param polizaRepository            the polizaRepository to set
	 */
	public void setPolizaRepository(PolizaRepository polizaRepository) {
		this.polizaRepository = polizaRepository;
	}

	/**
	 * Gets the polide repository.
	 *
	 * @return the polideRepository
	 */
	public PolideRepository getPolideRepository() {
		return polideRepository;
	}

	/**
	 * Sets the polide repository.
	 *
	 * @param polideRepository            the polideRepository to set
	 */
	public void setPolideRepository(PolideRepository polideRepository) {
		this.polideRepository = polideRepository;
	}

	/**
	 * Gets the muni nep repository.
	 *
	 * @return the muniNepRepository
	 */
	public MuniNepRepository getMuniNepRepository() {
		return muniNepRepository;
	}

	/**
	 * Sets the muni nep repository.
	 *
	 * @param muniNepRepository            the muniNepRepository to set
	 */
	public void setMuniNepRepository(MuniNepRepository muniNepRepository) {
		this.muniNepRepository = muniNepRepository;
	}

}
