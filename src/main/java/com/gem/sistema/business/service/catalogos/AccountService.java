package com.gem.sistema.business.service.catalogos;

import java.util.List;

import com.gem.sistema.business.domain.Cuenta;
import com.gem.sistema.load.fileupload.validators.results.EgresResultBean;

// TODO: Auto-generated Javadoc
/**
 * The Interface AccountService.
 *
 * @author 
 */
public interface AccountService {

	/**
	 * Checks if is valid previous level account.
	 *
	 * @param catalog the catalog
	 * @param errorMsg the error msg
	 * @param idsector the idsector
	 * @return true, if is valid previous level account
	 */
	boolean isValidPreviousLevelAccount(Cuenta catalog, StringBuilder errorMsg, Long idsector);

	/**
	 * Gets the list autogenerated account budget by expenditure.
	 *
	 * @param account the account
	 * @return the list autogenerated account budget by expenditure
	 */
	List<Cuenta> getListAutogeneratedAccountBudgetByExpenditure(Cuenta account);

	/**
	 * Gets the list autogenerated account by expenditure.
	 *
	 * @param typeAccount the type account
	 * @return the list autogenerated account by expenditure
	 */
	List<String> getListAutogeneratedAccountByExpenditure(String typeAccount);

	/**
	 * Gets the list autogenerated account budget by income.
	 *
	 * @param account the account
	 * @return the list autogenerated account budget by income
	 */
	List<Cuenta> getListAutogeneratedAccountBudgetByIncome(Cuenta account);

	/**
	 * Checks if is contable account.
	 *
	 * @param cuenta the cuenta
	 * @return the boolean
	 */
	Boolean isContableAccount(String cuenta);

	/**
	 * Checks if is 5 x account.
	 *
	 * @param cuenta the cuenta
	 * @return the boolean
	 */
	Boolean is5xAccount(String cuenta);

	/**
	 * Fill zeros.
	 *
	 * @param value the value
	 * @param length the length
	 * @return the string
	 */
	String fillZeros(final String value, final int length);

	/**
	 * Fill right zeros.
	 *
	 * @param value the value
	 * @param length the length
	 * @return the string
	 */
	String fillRightZeros(final String value, final int length);

	/**
	 * Exist account.
	 *
	 * @param catalog the catalog
	 * @param errorMsg the error msg
	 * @param idsector the idsector
	 * @return true, if successful
	 */
	boolean existAccount(final Cuenta catalog, final StringBuilder errorMsg, Long idsector);

	/**
	 * Gets the niv cta.
	 *
	 * @param catalog the catalog
	 * @return the niv cta
	 */
	int getNivCta(Cuenta catalog);

	/**
	 * Populate acc.
	 *
	 * @param account the account
	 * @param original the original
	 * @return the cuenta
	 */
	Cuenta populateAcc(Cuenta account, Cuenta original);

	/**
	 * Checks if is mayor account.
	 *
	 * @param account the account
	 * @return the boolean
	 */
	Boolean isMayorAccount(Cuenta account);

	/**
	 * Exist dependency.
	 *
	 * @param dependency the dependency
	 * @return the boolean
	 */
	Boolean existDependency(String dependency);

	/**
	 * Exist xcatpro.
	 *
	 * @param clvpro the clvpro
	 * @param idSector the id sector
	 * @return the boolean
	 */
	Boolean existXcatpro(String clvpro, Integer idSector);

	/**
	 * Exist natgas.
	 *
	 * @param clvgas the clvgas
	 * @param idSector the id sector
	 * @return the boolean
	 */
	Boolean existNatgas(String clvgas, Integer idSector);

	/**
	 * Delete.
	 *
	 * @param cuenta the cuenta
	 * @return the string
	 */
	String delete(Cuenta cuenta);

	/**
	 * Checks for childs.
	 *
	 * @param cuenta the cuenta
	 * @return true, if successful
	 */
	boolean hasChilds(Cuenta cuenta);

	/**
	 * Validate.
	 *
	 * @param egresoResult the egreso result
	 * @param cuenta the cuenta
	 * @return the egres result bean
	 */
	EgresResultBean validate(EgresResultBean egresoResult, Cuenta cuenta);

	/**
	 * Gets the egreso acc.
	 *
	 * @param cuenta the cuenta
	 * @return the egreso acc
	 */
	List<Cuenta> getEgresoAcc(Cuenta cuenta);

	/**
	 * Gets the autogenerated budget account.
	 *
	 * @param catalog the catalog
	 * @return the autogenerated budget account
	 */
	List<Cuenta> getAutogeneratedBudgetAccount(final Cuenta catalog);

	/**
	 * Gets the accountby chapter.
	 *
	 * @param chapter the chapter
	 * @return the accountby chapter
	 */
	public Cuenta getAccountbyChapter(int chapter);

	/**
	 * Checks if is last level acc.
	 *
	 * @param cuenta the cuenta
	 * @return true, if is last level acc
	 */
	boolean isLastLevelAcc(Cuenta cuenta);

  /**
   * Reset accounts.
   *
   * @param idSector the id sector
   */
  void resetAccounts(Long idSector);

  /**
   * Find to update for file reset.
   *
   * @param cuenta the cuenta
   * @param scta the scta
   * @param sscta the sscta
   * @param ssscta the ssscta
   * @param sssscta the sssscta
   * @param idSector the id sector
   * @return the list
   */
  List<Cuenta> findToUpdateForFileReset(String cuenta, String scta,
                                  String sscta, String ssscta,
                                  String sssscta, Long idSector);

  /**
   * Update salini to accounts.
   *
   * @param cuentas the cuentas
   * @param salini the salini
   */
  void updateSaliniToAccounts(List<Cuenta> cuentas, double salini);

	/**
	 * Save account.
	 *
	 * @param cuenta the cuenta
	 * @return the cuenta
	 */
	public Cuenta saveAccount(Cuenta cuenta);

  /**
   * Find accounts to backup.
   *
   * @param idSector the id sector
   * @return the list
   */
  List<Cuenta> findAccountsToBackup(Long idSector);

 /**
  * Find first by cuenta and scuenta and sscuenta and ssscuenta and sssscuenta and idsector.
  *
  * @param cuenta the cuenta
  * @param scuenta the scuenta
  * @param sscuenta the sscuenta
  * @param ssscuenta the ssscuenta
  * @param sssscuenta the sssscuenta
  * @param idSector the id sector
  * @return the cuenta
  */
 public Cuenta findFirstByCuentaAndScuentaAndSscuentaAndSsscuentaAndSssscuentaAndIdsector(String cuenta, String scuenta, String sscuenta, String ssscuenta, String sssscuenta, Long idSector);

 /**
  * Find all by idsector and cuenta.
  *
  * @param idSector the id sector
  * @param cuenta the cuenta
  * @return the list
  */
 public List<Cuenta> findAllByIdsectorAndCuenta(Long idSector,String cuenta);
 
 /**
  * Find first by cuenta and scuenta and sscuenta and idsector.
  *
  * @param cta the cta
  * @param scta the scta
  * @param sscta the sscta
  * @param idsector the idsector
  * @return the cuenta
  */
 public Cuenta findFirstByCuentaAndScuentaAndSscuentaAndIdsector(String cta, String scta, String sscta, Long idsector);

}
